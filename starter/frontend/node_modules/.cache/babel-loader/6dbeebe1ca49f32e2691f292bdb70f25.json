{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\wamp64\\\\www\\\\GitHub\\\\TriviaProject\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/play',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            total_questions: result.total_questions,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`,\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-play-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choose-header\",\n        children: \"Choose Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"play-category\",\n          onClick: this.selectCategory,\n          children: \"ALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), Object.keys(this.state.categories).map(id => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            value: id,\n            className: \"play-category\",\n            onClick: () => this.selectCategory({\n              type: this.state.categories[id],\n              id\n            }),\n            children: this.state.categories[id]\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderFinalScore() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-play-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"final-header\",\n        children: [\" Your Final Score is \", this.state.numCorrect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"play-again button\",\n        onClick: this.restartGame,\n        children: \" Play Again? \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-play-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: this.state.currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${evaluate ? 'correct' : 'wrong'}`,\n        children: evaluate ? \"You were correct!\" : \"You were incorrect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-answer\",\n        children: this.state.currentQuestion.answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-question button\",\n        onClick: this.getNextQuestion,\n        children: \" Next Question \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.total_questions == 0 || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-play-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: this.state.currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitGuess,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"guess\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"submit-guess button\",\n          type: \"submit\",\n          value: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this);\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:/wamp64/www/GitHub/TriviaProject/starter/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","total_questions","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    }\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectCategory = ({ type, id = 0 }) => {\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if (this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/play', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          total_questions: result.total_questions,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    let evaluate = this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"choose-header\">Choose Category</div>\n        <div className=\"category-holder\">\n          <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n          {Object.keys(this.state.categories).map(id => {\n            return (\n              <div\n                key={id}\n                value={id}\n                className=\"play-category\"\n                onClick={() => this.selectCategory({ type: this.state.categories[id], id })}>\n                {this.state.categories[id]}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  renderFinalScore() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    let evaluate = this.evaluateAnswer()\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.total_questions == 0 || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n      ? this.renderPlay()\n      : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}